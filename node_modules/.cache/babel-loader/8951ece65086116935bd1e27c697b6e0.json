{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport useLocalStorage from 'hooks/useLocalStorage';\nexport default (url => {\n  const baseUrl = 'https://conduit.productionready.io/api';\n  const [isLoading, setIsLoading] = useState(false);\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [options, setOptions] = useState({});\n  const [token] = useLocalStorage('token');\n\n  const doFetch = (options = {}) => {\n    setOptions(options);\n    setIsLoading(true);\n  };\n\n  useEffect(() => {\n    const requestOptions = { ...options,\n      ...{\n        headers: {\n          authorization: token ? `Token ${token}` : ''\n        }\n      }\n    };\n\n    if (!isLoading) {\n      return;\n    }\n\n    axios(baseUrl + url, requestOptions).then(res => {\n      console.log('res', res);\n      setIsLoading(false);\n      setResponse(res.data);\n    }).catch(error => {\n      console.log('error', error);\n      setIsLoading(false);\n      setError(error.response.data);\n    }, [isLoading, options, url]);\n  });\n  return [{\n    isLoading,\n    response,\n    error\n  }, doFetch];\n});","map":{"version":3,"sources":["C:/Users/yurBoy/Desktop/bobNode/hook-app/medium_clone/src/node_modules/hooks/useFetch.js"],"names":["useState","useEffect","axios","useLocalStorage","url","baseUrl","isLoading","setIsLoading","response","setResponse","error","setError","options","setOptions","token","doFetch","requestOptions","headers","authorization","then","res","console","log","data","catch"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA,gBAAeC,GAAG,IAAG;AACjB,QAAMC,OAAO,GAAG,wCAAhB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAE,EAAF,CAAtC;AACA,QAAM,CAACc,KAAD,IAAUX,eAAe,CAAC,OAAD,CAA/B;;AAGA,QAAMY,OAAO,GAAC,CAACH,OAAO,GAAG,EAAX,KAAgB;AAC1BC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAHD;;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,cAAc,GAAG,EACrB,GAAGJ,OADkB;AAErB,SAAG;AACDK,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEJ,KAAK,GAAI,SAAQA,KAAM,EAAlB,GAAsB;AADnC;AADR;AAFkB,KAAvB;;AAQA,QAAI,CAACR,SAAL,EAAgB;AACd;AACD;;AAEDJ,IAAAA,KAAK,CAACG,OAAO,GAAGD,GAAX,EAAgBY,cAAhB,CAAL,CACGG,IADH,CACQC,GAAG,IAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACAb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,WAAW,CAACW,GAAG,CAACG,IAAL,CAAX;AACD,KALH,EAMGC,KANH,CAMSd,KAAK,IAAI;AACdW,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBZ,KAArB;AACAH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAI,MAAAA,QAAQ,CAACD,KAAK,CAACF,QAAN,CAAee,IAAhB,CAAR;AACD,KAVH,EAUK,CAACjB,SAAD,EAAYM,OAAZ,EAAqBR,GAArB,CAVL;AAWD,GAxBM,CAAT;AA0BA,SAAM,CAAC;AAACE,IAAAA,SAAD;AAAWE,IAAAA,QAAX;AAAoBE,IAAAA;AAApB,GAAD,EAA4BK,OAA5B,CAAN;AACH,CAzCD","sourcesContent":["import {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nimport useLocalStorage from 'hooks/useLocalStorage'\r\n\r\nexport default url =>{\r\n    const baseUrl = 'https://conduit.productionready.io/api'\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [response, setResponse] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [options, setOptions] = useState ({})\r\n    const [token] = useLocalStorage('token')\r\n\r\n\r\n    const doFetch=(options = {})=>{\r\n        setOptions(options)\r\n        setIsLoading(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const requestOptions = {\r\n          ...options,\r\n          ...{\r\n            headers: {\r\n              authorization: token ? `Token ${token}` : ''\r\n            }\r\n          }\r\n        }\r\n        if (!isLoading) {\r\n          return\r\n        }\r\n    \r\n        axios(baseUrl + url, requestOptions)\r\n          .then(res => {\r\n            console.log('res', res)\r\n            setIsLoading(false)\r\n            setResponse(res.data)\r\n          })\r\n          .catch(error => {\r\n            console.log('error', error)\r\n            setIsLoading(false)\r\n            setError(error.response.data)\r\n          }, [isLoading, options, url])\r\n      })\r\n\r\n    return[{isLoading,response,error},doFetch]\r\n}"]},"metadata":{},"sourceType":"module"}