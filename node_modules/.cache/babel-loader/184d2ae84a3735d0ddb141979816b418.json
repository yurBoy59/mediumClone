{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default (url => {\n  const baseUrl = 'https://conduit.productionready.io/api';\n  const [isLoading, setIsLoading] = useState(false);\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [options, setOptions] = useState({});\n\n  const doFetch = (options = {}) => {\n    setOptions(options);\n  };\n\n  useEffect(() => {\n    if (!isLoading) {\n      return;\n    }\n\n    console.log('effect is triggered');\n    axios(baseUrl + url, options).then(res => {\n      console.log('res', res);\n      setIsLoading(false);\n      setResponse(res.data);\n    }).catch(error => {\n      console.log('error', error);\n      setIsLoading(false);\n      setError(error.response.data);\n    });\n  });\n  return [{\n    isLoading,\n    response,\n    error\n  }, doFetch];\n});","map":{"version":3,"sources":["C:/Users/yurBoy/Desktop/bobNode/hook-app/medium_clone/src/node_modules/hooks/useFetch.js"],"names":["useState","useEffect","axios","url","baseUrl","isLoading","setIsLoading","response","setResponse","error","setError","options","setOptions","doFetch","console","log","then","res","data","catch"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,gBAAeC,GAAG,IAAG;AACjB,QAAMC,OAAO,GAAG,wCAAhB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAE,EAAF,CAAtC;;AAEA,QAAMa,OAAO,GAAC,CAACF,OAAO,GAAG,EAAX,KAAgB;AAC1BC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACH,GAFD;;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACI,SAAL,EAAgB;AACd;AACD;;AACDS,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAEAb,IAAAA,KAAK,CAACE,OAAO,GAAGD,GAAX,EAAgBQ,OAAhB,CAAL,CACGK,IADH,CACQC,GAAG,IAAI;AACXH,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBE,GAAnB;AACAX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,WAAW,CAACS,GAAG,CAACC,IAAL,CAAX;AACD,KALH,EAMGC,KANH,CAMSV,KAAK,IAAI;AACdK,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,KAArB;AACAH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAI,MAAAA,QAAQ,CAACD,KAAK,CAACF,QAAN,CAAeW,IAAhB,CAAR;AACD,KAVH;AAWD,GAjBM,CAAT;AAmBA,SAAM,CAAC;AAACb,IAAAA,SAAD;AAAWE,IAAAA,QAAX;AAAoBE,IAAAA;AAApB,GAAD,EAA4BI,OAA5B,CAAN;AACH,CA/BD","sourcesContent":["import {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default url =>{\r\n    const baseUrl = 'https://conduit.productionready.io/api'\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [response, setResponse] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [options, setOptions] = useState ({})\r\n\r\n    const doFetch=(options = {})=>{\r\n        setOptions(options)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isLoading) {\r\n          return\r\n        }\r\n        console.log('effect is triggered')\r\n    \r\n        axios(baseUrl + url, options)\r\n          .then(res => {\r\n            console.log('res', res)\r\n            setIsLoading(false)\r\n            setResponse(res.data)\r\n          })\r\n          .catch(error => {\r\n            console.log('error', error)\r\n            setIsLoading(false)\r\n            setError(error.response.data)\r\n          })\r\n      })\r\n\r\n    return[{isLoading,response,error},doFetch]\r\n}"]},"metadata":{},"sourceType":"module"}